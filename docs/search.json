[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Use this repository to host a website for your CASA0025 final project by following these stpes:\n\nclone this repository\ninstall quarto\nedit the ‘index.qmd’ file with the contents of your project\nusing terminal, navigate to the project directory and run “quarto render”\npush the changes to your github repository\non github, navigate to Settings&gt;Pages&gt;Build and Deployment. Make sure that under “Source” it says “deploy from branch”. Under “Branch”, select “Main” in the first dropdown and “Docs” under the second drop down. Then press “Save”\n\nYour website should now be available under https://imhonggae.github.io/CASA0025"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.\n\n\nWhat is the problem you’re trying to address using this application?\n\n\n\nWho are you building this application for? How does it address a need this community has?\n\n\n\nWhat data are you using?\n\n\n\nHow are you using this data to address the problem?\nmath: \\[ \\Large t = {\\frac{\\overline{x_1}-\\overline{x_2}} {\\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}}}} \\]\n\n\n\nHow does your application’s interface work to address the needs of your end user?\nThe following four UI designs are mainly used to meet the needs of users:\n\nDifferent colored legends were designed to represent different types of land. For example, green represents vegetation, yellow represents bare land, and gray represents urban.\nA dropdown menu related to time has been designed, allowing users to freely choose the year and month before and after the conflict.\nA line chart has been designed, allowing users to clearly see the changes in arable land area between 5 months before and after the conflict.\nDesigned a GIF animated map, where users can see the changes in three types of land in Gaza after the conflict and download it.\n\n\n\n\n\nReplace the link below with the link to your application.\n\n\n\n\n\n\n\nUse this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):\n\n\n// 定义月份的开始和结束日期 var dates = [ {year: 2022, month: ‘11’, pathSuffix: ‘2022_11’}, //{year: 2022, month: ‘12’, pathSuffix: ‘2022_12’}, //{year: 2023, month: ‘01’, pathSuffix: ‘2023_01’}, //{year: 2023, month: ‘02’, pathSuffix: ‘2023_02’}, //{year: 2023, month: ‘03’, pathSuffix: ‘2023_03’}, //{year: 2023, month: ‘11’, pathSuffix: ‘2023_11’}, // {year: 2023, month: ‘12’, pathSuffix: ‘2023_12’}, //{year: 2024, month: ‘01’, pathSuffix: ‘2024_01’}, //{year: 2024, month: ‘02’, pathSuffix: ‘2024_02’}, //{year: 2024, month: ‘03’, pathSuffix: ‘2024_03’}];\n// 定义可视化参数 var s_rgb = { min: 0.0, max: 6000, bands:[‘B4’, ‘B3’, ‘B2’], // bands:[‘B8’, ‘B4’, ‘B3’], // 使用近红外、红、绿波段的假彩色合成 opacity:1 };\ndates.forEach(function(dateRange) { var start = dateRange.year + ‘-’ + dateRange.month + ‘-01’; var end = new Date(dateRange.year, dateRange.month, 0).toISOString().split(‘T’)[0]; // Auto-adjust month length var sentinel = ee.ImageCollection(‘COPERNICUS/S2_SR’) .filter(ee.Filter.date(start, end)) .filter(ee.Filter.lt(‘CLOUDY_PIXEL_PERCENTAGE’, 15)) .select(bands) // 确保在过滤之前选择一致的波段集合 .median();\nvar ndwi = sentinel.normalizedDifference([‘B3’,‘B8’]).rename(‘ndwi’); var image = sentinel.updateMask(ndwi.lt(0.3)).select(bands);\nMap.addLayer(image.clip(aoi), s_rgb, ‘Sentinel’ + dateRange.year + ‘-’ + dateRange.month);\n// 加载特定月份的FeatureCollection var basePath = ‘projects/ucfnqma/assets/Gaza/land_types_’ + dateRange.pathSuffix; var landTypes = ee.FeatureCollection(basePath);\n// 为每种landType生成样本点 var vegetationPoints = ee.FeatureCollection.randomPoints({ region: landTypes.filter(ee.Filter.eq(‘landType’, ‘vegetation’)), points: 3000 // 假设为植被类的数量 }).map(function(feat) { return feat.set(‘class’, 0); });\nvar barePoints = ee.FeatureCollection.randomPoints({ region: landTypes.filter(ee.Filter.eq(‘landType’, ‘bare’)), points: 2000 // 假设为裸土类的数量 }).map(function(feat) { return feat.set(‘class’, 1); });\nvar urbanPoints = ee.FeatureCollection.randomPoints({ region: landTypes.filter(ee.Filter.eq(‘landType’, ‘urban’)), points: 1000 // 假设为城市类的数量 }).map(function(feat) { return feat.set(‘class’, 2); });\n// 合并所有样本点，并添加随机列以后续分割 var sample = vegetationPoints.merge(barePoints).merge(urbanPoints).randomColumn();\n\n\n\n\n\n\n\nCreate a map instance and Set the center point and zoom level of the map\n\nvar map1 = ui.Map();\nmap1.centerObject(aoi,10.5);\n\nAdd a side UI, then create a selection box to place it in the side UI. Users can select 2022-11, 2022-12, 2023-1, 2023-2, 2023-11, 2023-12, 2024-1, 2024-2, 2024-3, and call a function to update the displayed layer.\n\nvar imageCollection = classificationCollection.map(function(img){\n  return img.clip(aoi);\n});\n// Create a selection box \nvar select = ui.Select({\n  items: ['2022-11', '2022-12', '2023-01', '2023-02', '2023-03','2023-11', '2023-12', '2024-01', '2024-02', '2024-03'],\n  value: '2022-11',  //Default selection '2022-11'\n  placeholder: 'Choose a number',\n  onChange: function(value) {\n    // Call the function to update the map\n    updateMaps(value);\n  }\n});\n\n// Create a label\nvar label = ui.Label('Please select a time', {margin: '10px 0px 5px 0px'});\n\n// Create a panel where you can place the selection boxes and labels\nvar controlPanel = ui.Panel({\n  widgets: [label, select],\n  style: {width: '300px', padding: '10px'} , // Positioning and styling\n  layout: ui.Panel.Layout.flow('horizontal')  // Set to horizontal layout\n});\n\n// Add the map to the root panel\nui.root.widgets().reset([map1]);\n\n// Set the style of the map\nmap1.style().set('width', '65%');\n\n// Create a panel to place the control panel\nvar sidebarPanel = ui.Panel({\n  widgets: [controlPanel],\n  style: {position: 'top-right', width: '120px',height: '300px',  margin: '0px 10px 0px 0px'}\n});\n\n// Adds the sidebar panel to the root panel\nui.root.add(sidebarPanel);\nThis is the detail of update function. In this function, we first converts a collection of images to a list, then determine the index of the image by month.\n// Converts a collection of images to a list\nvar imageList = imageCollection.toList(imageCollection.size());\n\nfunction updateMaps(month) {\n  // Determine the index of the image by month\n  var index1;\n  switch (month) {\n    case '2022-11':\n      index1 = 0;\n      break;\n    case '2022-12':\n      index1 = 1;\n      break;\n    case '2023-01':\n      index1 = 2;\n      break;\n    case '2023-02':\n      index1 = 3;\n      break;\n    case '2023-03':\n      index1 = 4;\n      break;\n    case '2023-11':\n      index1 = 5;\n      break;\n    case '2023-12':\n      index1 = 6;\n      break;\n    case '2024-01':\n      index1 = 7;\n      break;\n    case '2024-02':\n      index1 = 8;\n      break;\n    case '2024-03':\n      index1 = 9;\n      break;\n    default:\n      console.error('Invalid month selected:', month);\n      return;\n  }\n  // Get the image by index\n  var image1 = ee.Image(imageList.get(index1));\n\nAdd the legends to the map. We define the color list and description list, then create the legend style and legend panel. Add legend items in a loop. It contains description labels and color blocks, adds legend items to the inside version of the diagram, and adds legends to the lower left corner of the map.\n\npdateMaps('2022-11');\n\n// Define the color list and description list\nvar palette = ['green', 'yellow', 'grey']; // Suppose this is your list of colors\nvar names = ['vegetation', 'bare', 'urban']; // A description corresponding to the color\n\n// Create a style for the legend\nvar legendStyle = {\n  margin: '0px 8px 15px 0px',\n  padding: '0px 5px 5px 0px',\n  position: 'bottom-left'\n};\n\n// Create the panel of legend\nvar legendPanel = ui.Panel({\n  widgets: [], // Used to add legend entries\n  style: legendStyle\n});\n\n// Add a legend entry\nfor (var i = 0; i &lt; palette.length; i++) {\n  var legendItem = ui.Panel({\n    layout: ui.Panel.Layout.Flow('horizontal'),\n    style: {margin: '0px 10px'}\n  });\n  \n  // create color block\n  var colorBlock = ui.Label({\n    style: {\n      backgroundColor: palette[i],\n      padding: '5px',\n      margin: '0 0 4px 0'\n    }\n  });\n  \n  // create desctription label\n  var description = ui.Label({\n    value: names[i],\n    style: {margin: '0 0 4px 8px'}\n  });\n  \n  legendItem.add(colorBlock);\n  legendItem.add(description);\n  \n  // Adds a legend item to the Legend panel\n  legendPanel.add(legendItem);\n}\n\n// Add the legend to the bottom left corner of the map\nmap1.add(legendPanel);\n\nBefore drawing a line graph of vegetation area changes before and after conflicts, we need to export the image for area calculation. (Note: Due to the high computational complexity, calling the area calculation function directly can lead to long waiting times and may cause webpage crashes. Therefore, it is necessary to export the area calculation results first.)\n\n// Batch download functions\nfunction exportImage(image, roi, fileName) {  \n  Export.image.toAsset({  \n    image: image,\n    description: 'GAZA_'+fileName,\n    region: aoi,\n    scale: 10,\n    maxPixels: 1e13, // Maximum image element\n  });  \n}\n\n// Generate the list and download iteratively\nvar indexList = classificationCollection.reduceColumns(ee.Reducer.toList(), [\"system:index\"]).get(\"list\"); \nprint(\"indexList\", indexList);\nindexList.evaluate(function(indexs) { \n  for (var i=0; i&lt;indexs.length; i++) {  \n    var image = classificationCollection.filter(ee.Filter.eq(\"system:index\", indexs[i]))\n      .first()\n    var name=parseInt(indexs[i])\n        \n    exportImage(image, aoi, name);  //Save the image to Asset\n  }\n}); \n\nvar aoi = ee.FeatureCollection('users/liujingyue01/Gaza');\nvar imageCollection=ee.ImageCollection('projects/hongkairen81/assets/GAZA');\nprint(imageCollection)\n\n// Calculating the vegetation area as a function\nfunction calculateVegetationArea(image) {\n  var vegetationArea = image.select('classification').eq(0).multiply(ee.Image.pixelArea()).reduceRegion({\n    reducer: ee.Reducer.sum(),\n    geometry: aoi,\n    scale: 30\n  }).get('classification');\n  return ee.Feature(null, {'date': image.get('date'), 'vegetationArea': vegetationArea});\n}\n\n// Apply a function to each Image in the imageCollection\nvar vegetationAreas = imageCollection.map(calculateVegetationArea).sort('date');\n\n// Convert the result to a list\nvar vegetationAreaList = vegetationAreas.toList(vegetationAreas.size());\nprint(vegetationAreaList)\nvar firstFive = ee.List.sequence(0, 9).map(function(i) { return ee.Feature(vegetationAreaList.get(i)).get('vegetationArea'); });\n// var lastFive = ee.List.sequence(5, 9).map(function(i) { return ee.Feature(vegetationAreaList.get(i)).get('vegetationArea'); });\n\n// Convert the area to a numerical value\nvar firstFiveNumbers = firstFive.map(function(area) { return ee.Number(area); });\nprint(firstFiveNumbers)\n\nDraw the area calculation results onto a line graph. Set two y values before and after the conflict, which are two lines.\n\nvar firstFiveNumbers = ee.List([ 108.981451,\n  124.064503,\n  156.647346,\n  160.888861,\n  191.688693]);\nvar lastFiveNumbers = ee.List([145.504210,\n  160.795185,\n  125.786433,\n  105.063353, \n  107.703722]);\n\n// Abscissa data\nvar xAxis = ['11', '12', '1', '2', '3'];\n\n// Create a data source in the DataTable format that conforms to the Google Visualization API\nvar chartData = ee.FeatureCollection(xAxis.map(function(x, index) {\n  return ee.Feature(null, {\n    'x': x,\n    'y1': firstFiveNumbers.get(index),\n    'y2': lastFiveNumbers.get(index)\n  });\n}));\n\n// Create a line chart using ui.Chart\nvar lineChart = ui.Chart.feature.byFeature({\n  features: chartData,\n  xProperty: 'x',\n  yProperties: ['y1', 'y2'] // Add two sets of y values\n}).setSeriesNames(['Before the conflict', 'After the conflict']) // Set series name\n  .setOptions({\n    title: 'Comparison of areas before and after the conflict',\n    hAxis: {title: 'month', titleTextStyle: {color: 'red'}},\n    vAxis: {title: 'vegetation Area', titleTextStyle: {color: 'blue'}},\n    legend: 'right' // Display legend\n  });\n\n// Set the size of the chart\nvar options = {\n  title: 'Comparison of areas before and after the conflict',\n  hAxis: {title: 'month', titleTextStyle: {color: 'red'}},\n  vAxis: {title: 'vegetation Area (km^2)', titleTextStyle: {color: 'blue'}},\n  legend: 'right',\n  width: 400, // Set chart width\n  height: 300 // Set chart height\n};\n\n// Create a line chart\nvar lineChart = ui.Chart.feature.byFeature({\n  features: chartData,\n  xProperty: 'x',\n  yProperties: ['y1', 'y2']\n}).setSeriesNames(['Before the cnflict', 'After the conflict']).setOptions(options);\n\n// Adjust the style of the sidebar panel to ensure that there is enough space to display the chart\nsidebarPanel.style().set({\n  width: '400px', // Sets the minimum width of the panel\n  height: 'auto' // Automatically adjust the height according to the content\n});\n\n// Adds a line chart to the sidebar panel\nsidebarPanel.add(lineChart);\n\nDraw a GIF image of post conflict land changes (November 2023.11-204.3) and place it in the side UI.\n\n//show gif\nfunction main() {\n  //Assume that the roi is defined and is a Feature or FeatureCollection\n  var roi = aoi;\n\n  // Let's say imgCol is defined and it contains 10 single-band images\n  var imgCol = classificationCollection.map(function(image){\n    return image.clip(roi);\n  });\n  \n  // Gets the number of images in the collection\n  var count =imgCol.toList(imgCol.size()).length();\n\n  // Calculate the number of images to skip\n  var skipCount = 5;\n\n  // Skip the previous images to get the last five images\n  var lastFiveImages = classificationCollection.toList(classificationCollection.size())\n  .slice(skipCount, count);\n\n  // Converts a list back to a collection of images\n  imgCol = ee.ImageCollection.fromImages(lastFiveImages).map(function(img){\n    return img.clip(aoi)\n  });\n\n  // Defines a function to map a single-band image to an RGB color\n  function mapToRgb(image) {\n    // Get a single band image\n    var band = image.select([0]);\n\n    // Creates a new image with the same R, G, and B values for each pixel\n    var r = band.where(band.eq(0), 0).where(band.eq(1), 255).where(band.eq(2), 200).toInt(); \n    var g = band.where(band.eq(0), 128).where(band.eq(1), 255).where(band.eq(2), 200).toInt(); \n    var b = band.where(band.eq(0), 0).where(band.eq(1), 0).where(band.eq(2), 200).toInt();\n\n    // Returns a new image containing the RGB band\n    return ee.Image.cat(r, g, b).rename(['red', 'green', 'blue']).toFloat();\n  }\n\n  // Map each image to an RGB color\n  var rgbImgCol = imgCol.map(mapToRgb);\n\n  // GIF parameters\n  var params = {\n    crs: 'EPSG:3857',\n    framesPerSecond: 2,\n    region: roi.geometry().transform('EPSG:3857', 1), // Use the converted region\n    min: 0,\n    max: 255,\n    bands: ['red', 'green', 'blue'],\n    dimensions: 512,\n  };\n\n  // Add the GIF to the panel\n  sidebarPanel.add(ui.Thumbnail(rgbImgCol, params));\n  \n}\n\nmain();\n\nCreate a tag and set the tag’s hyperlink to download the GIF.\n\n// Create a label\nvar label = ui.Label('Download the GIF of \"Changing Land Conditions in Conflict\".');\n\n// Set the URL of the tag to make it a hyperlink\nlabel.setUrl(rgbImgCol.getVideoThumbURL(params));\n\nsidebarPanel.add(label);\nThe image output should look like this:\n\n\n\nChanging Land conditions in Conflict, 2023.11-2024.3"
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.\n\n\nWhat is the problem you’re trying to address using this application?\n\n\n\nWho are you building this application for? How does it address a need this community has?\n\n\n\nWhat data are you using?\n\n\n\nHow are you using this data to address the problem?\nmath: \\[ \\Large t = {\\frac{\\overline{x_1}-\\overline{x_2}} {\\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}}}} \\]\n\n\n\nHow does your application’s interface work to address the needs of your end user?\nThe following four UI designs are mainly used to meet the needs of users:\n\nDifferent colored legends were designed to represent different types of land. For example, green represents vegetation, yellow represents bare land, and gray represents urban.\nA dropdown menu related to time has been designed, allowing users to freely choose the year and month before and after the conflict.\nA line chart has been designed, allowing users to clearly see the changes in arable land area between 5 months before and after the conflict.\nDesigned a GIF animated map, where users can see the changes in three types of land in Gaza after the conflict and download it."
  },
  {
    "objectID": "index.html#the-application",
    "href": "index.html#the-application",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "Replace the link below with the link to your application."
  },
  {
    "objectID": "index.html#how-it-works",
    "href": "index.html#how-it-works",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "Use this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):\n\n\n// 定义月份的开始和结束日期 var dates = [ {year: 2022, month: ‘11’, pathSuffix: ‘2022_11’}, //{year: 2022, month: ‘12’, pathSuffix: ‘2022_12’}, //{year: 2023, month: ‘01’, pathSuffix: ‘2023_01’}, //{year: 2023, month: ‘02’, pathSuffix: ‘2023_02’}, //{year: 2023, month: ‘03’, pathSuffix: ‘2023_03’}, //{year: 2023, month: ‘11’, pathSuffix: ‘2023_11’}, // {year: 2023, month: ‘12’, pathSuffix: ‘2023_12’}, //{year: 2024, month: ‘01’, pathSuffix: ‘2024_01’}, //{year: 2024, month: ‘02’, pathSuffix: ‘2024_02’}, //{year: 2024, month: ‘03’, pathSuffix: ‘2024_03’}];\n// 定义可视化参数 var s_rgb = { min: 0.0, max: 6000, bands:[‘B4’, ‘B3’, ‘B2’], // bands:[‘B8’, ‘B4’, ‘B3’], // 使用近红外、红、绿波段的假彩色合成 opacity:1 };\ndates.forEach(function(dateRange) { var start = dateRange.year + ‘-’ + dateRange.month + ‘-01’; var end = new Date(dateRange.year, dateRange.month, 0).toISOString().split(‘T’)[0]; // Auto-adjust month length var sentinel = ee.ImageCollection(‘COPERNICUS/S2_SR’) .filter(ee.Filter.date(start, end)) .filter(ee.Filter.lt(‘CLOUDY_PIXEL_PERCENTAGE’, 15)) .select(bands) // 确保在过滤之前选择一致的波段集合 .median();\nvar ndwi = sentinel.normalizedDifference([‘B3’,‘B8’]).rename(‘ndwi’); var image = sentinel.updateMask(ndwi.lt(0.3)).select(bands);\nMap.addLayer(image.clip(aoi), s_rgb, ‘Sentinel’ + dateRange.year + ‘-’ + dateRange.month);\n// 加载特定月份的FeatureCollection var basePath = ‘projects/ucfnqma/assets/Gaza/land_types_’ + dateRange.pathSuffix; var landTypes = ee.FeatureCollection(basePath);\n// 为每种landType生成样本点 var vegetationPoints = ee.FeatureCollection.randomPoints({ region: landTypes.filter(ee.Filter.eq(‘landType’, ‘vegetation’)), points: 3000 // 假设为植被类的数量 }).map(function(feat) { return feat.set(‘class’, 0); });\nvar barePoints = ee.FeatureCollection.randomPoints({ region: landTypes.filter(ee.Filter.eq(‘landType’, ‘bare’)), points: 2000 // 假设为裸土类的数量 }).map(function(feat) { return feat.set(‘class’, 1); });\nvar urbanPoints = ee.FeatureCollection.randomPoints({ region: landTypes.filter(ee.Filter.eq(‘landType’, ‘urban’)), points: 1000 // 假设为城市类的数量 }).map(function(feat) { return feat.set(‘class’, 2); });\n// 合并所有样本点，并添加随机列以后续分割 var sample = vegetationPoints.merge(barePoints).merge(urbanPoints).randomColumn();\n\n\n\n\n\n\n\nCreate a map instance and Set the center point and zoom level of the map\n\nvar map1 = ui.Map();\nmap1.centerObject(aoi,10.5);\n\nAdd a side UI, then create a selection box to place it in the side UI. Users can select 2022-11, 2022-12, 2023-1, 2023-2, 2023-11, 2023-12, 2024-1, 2024-2, 2024-3, and call a function to update the displayed layer.\n\nvar imageCollection = classificationCollection.map(function(img){\n  return img.clip(aoi);\n});\n// Create a selection box \nvar select = ui.Select({\n  items: ['2022-11', '2022-12', '2023-01', '2023-02', '2023-03','2023-11', '2023-12', '2024-01', '2024-02', '2024-03'],\n  value: '2022-11',  //Default selection '2022-11'\n  placeholder: 'Choose a number',\n  onChange: function(value) {\n    // Call the function to update the map\n    updateMaps(value);\n  }\n});\n\n// Create a label\nvar label = ui.Label('Please select a time', {margin: '10px 0px 5px 0px'});\n\n// Create a panel where you can place the selection boxes and labels\nvar controlPanel = ui.Panel({\n  widgets: [label, select],\n  style: {width: '300px', padding: '10px'} , // Positioning and styling\n  layout: ui.Panel.Layout.flow('horizontal')  // Set to horizontal layout\n});\n\n// Add the map to the root panel\nui.root.widgets().reset([map1]);\n\n// Set the style of the map\nmap1.style().set('width', '65%');\n\n// Create a panel to place the control panel\nvar sidebarPanel = ui.Panel({\n  widgets: [controlPanel],\n  style: {position: 'top-right', width: '120px',height: '300px',  margin: '0px 10px 0px 0px'}\n});\n\n// Adds the sidebar panel to the root panel\nui.root.add(sidebarPanel);\nThis is the detail of update function. In this function, we first converts a collection of images to a list, then determine the index of the image by month.\n// Converts a collection of images to a list\nvar imageList = imageCollection.toList(imageCollection.size());\n\nfunction updateMaps(month) {\n  // Determine the index of the image by month\n  var index1;\n  switch (month) {\n    case '2022-11':\n      index1 = 0;\n      break;\n    case '2022-12':\n      index1 = 1;\n      break;\n    case '2023-01':\n      index1 = 2;\n      break;\n    case '2023-02':\n      index1 = 3;\n      break;\n    case '2023-03':\n      index1 = 4;\n      break;\n    case '2023-11':\n      index1 = 5;\n      break;\n    case '2023-12':\n      index1 = 6;\n      break;\n    case '2024-01':\n      index1 = 7;\n      break;\n    case '2024-02':\n      index1 = 8;\n      break;\n    case '2024-03':\n      index1 = 9;\n      break;\n    default:\n      console.error('Invalid month selected:', month);\n      return;\n  }\n  // Get the image by index\n  var image1 = ee.Image(imageList.get(index1));\n\nAdd the legends to the map. We define the color list and description list, then create the legend style and legend panel. Add legend items in a loop. It contains description labels and color blocks, adds legend items to the inside version of the diagram, and adds legends to the lower left corner of the map.\n\npdateMaps('2022-11');\n\n// Define the color list and description list\nvar palette = ['green', 'yellow', 'grey']; // Suppose this is your list of colors\nvar names = ['vegetation', 'bare', 'urban']; // A description corresponding to the color\n\n// Create a style for the legend\nvar legendStyle = {\n  margin: '0px 8px 15px 0px',\n  padding: '0px 5px 5px 0px',\n  position: 'bottom-left'\n};\n\n// Create the panel of legend\nvar legendPanel = ui.Panel({\n  widgets: [], // Used to add legend entries\n  style: legendStyle\n});\n\n// Add a legend entry\nfor (var i = 0; i &lt; palette.length; i++) {\n  var legendItem = ui.Panel({\n    layout: ui.Panel.Layout.Flow('horizontal'),\n    style: {margin: '0px 10px'}\n  });\n  \n  // create color block\n  var colorBlock = ui.Label({\n    style: {\n      backgroundColor: palette[i],\n      padding: '5px',\n      margin: '0 0 4px 0'\n    }\n  });\n  \n  // create desctription label\n  var description = ui.Label({\n    value: names[i],\n    style: {margin: '0 0 4px 8px'}\n  });\n  \n  legendItem.add(colorBlock);\n  legendItem.add(description);\n  \n  // Adds a legend item to the Legend panel\n  legendPanel.add(legendItem);\n}\n\n// Add the legend to the bottom left corner of the map\nmap1.add(legendPanel);\n\nBefore drawing a line graph of vegetation area changes before and after conflicts, we need to export the image for area calculation. (Note: Due to the high computational complexity, calling the area calculation function directly can lead to long waiting times and may cause webpage crashes. Therefore, it is necessary to export the area calculation results first.)\n\n// Batch download functions\nfunction exportImage(image, roi, fileName) {  \n  Export.image.toAsset({  \n    image: image,\n    description: 'GAZA_'+fileName,\n    region: aoi,\n    scale: 10,\n    maxPixels: 1e13, // Maximum image element\n  });  \n}\n\n// Generate the list and download iteratively\nvar indexList = classificationCollection.reduceColumns(ee.Reducer.toList(), [\"system:index\"]).get(\"list\"); \nprint(\"indexList\", indexList);\nindexList.evaluate(function(indexs) { \n  for (var i=0; i&lt;indexs.length; i++) {  \n    var image = classificationCollection.filter(ee.Filter.eq(\"system:index\", indexs[i]))\n      .first()\n    var name=parseInt(indexs[i])\n        \n    exportImage(image, aoi, name);  //Save the image to Asset\n  }\n}); \n\nvar aoi = ee.FeatureCollection('users/liujingyue01/Gaza');\nvar imageCollection=ee.ImageCollection('projects/hongkairen81/assets/GAZA');\nprint(imageCollection)\n\n// Calculating the vegetation area as a function\nfunction calculateVegetationArea(image) {\n  var vegetationArea = image.select('classification').eq(0).multiply(ee.Image.pixelArea()).reduceRegion({\n    reducer: ee.Reducer.sum(),\n    geometry: aoi,\n    scale: 30\n  }).get('classification');\n  return ee.Feature(null, {'date': image.get('date'), 'vegetationArea': vegetationArea});\n}\n\n// Apply a function to each Image in the imageCollection\nvar vegetationAreas = imageCollection.map(calculateVegetationArea).sort('date');\n\n// Convert the result to a list\nvar vegetationAreaList = vegetationAreas.toList(vegetationAreas.size());\nprint(vegetationAreaList)\nvar firstFive = ee.List.sequence(0, 9).map(function(i) { return ee.Feature(vegetationAreaList.get(i)).get('vegetationArea'); });\n// var lastFive = ee.List.sequence(5, 9).map(function(i) { return ee.Feature(vegetationAreaList.get(i)).get('vegetationArea'); });\n\n// Convert the area to a numerical value\nvar firstFiveNumbers = firstFive.map(function(area) { return ee.Number(area); });\nprint(firstFiveNumbers)\n\nDraw the area calculation results onto a line graph. Set two y values before and after the conflict, which are two lines.\n\nvar firstFiveNumbers = ee.List([ 108.981451,\n  124.064503,\n  156.647346,\n  160.888861,\n  191.688693]);\nvar lastFiveNumbers = ee.List([145.504210,\n  160.795185,\n  125.786433,\n  105.063353, \n  107.703722]);\n\n// Abscissa data\nvar xAxis = ['11', '12', '1', '2', '3'];\n\n// Create a data source in the DataTable format that conforms to the Google Visualization API\nvar chartData = ee.FeatureCollection(xAxis.map(function(x, index) {\n  return ee.Feature(null, {\n    'x': x,\n    'y1': firstFiveNumbers.get(index),\n    'y2': lastFiveNumbers.get(index)\n  });\n}));\n\n// Create a line chart using ui.Chart\nvar lineChart = ui.Chart.feature.byFeature({\n  features: chartData,\n  xProperty: 'x',\n  yProperties: ['y1', 'y2'] // Add two sets of y values\n}).setSeriesNames(['Before the conflict', 'After the conflict']) // Set series name\n  .setOptions({\n    title: 'Comparison of areas before and after the conflict',\n    hAxis: {title: 'month', titleTextStyle: {color: 'red'}},\n    vAxis: {title: 'vegetation Area', titleTextStyle: {color: 'blue'}},\n    legend: 'right' // Display legend\n  });\n\n// Set the size of the chart\nvar options = {\n  title: 'Comparison of areas before and after the conflict',\n  hAxis: {title: 'month', titleTextStyle: {color: 'red'}},\n  vAxis: {title: 'vegetation Area (km^2)', titleTextStyle: {color: 'blue'}},\n  legend: 'right',\n  width: 400, // Set chart width\n  height: 300 // Set chart height\n};\n\n// Create a line chart\nvar lineChart = ui.Chart.feature.byFeature({\n  features: chartData,\n  xProperty: 'x',\n  yProperties: ['y1', 'y2']\n}).setSeriesNames(['Before the cnflict', 'After the conflict']).setOptions(options);\n\n// Adjust the style of the sidebar panel to ensure that there is enough space to display the chart\nsidebarPanel.style().set({\n  width: '400px', // Sets the minimum width of the panel\n  height: 'auto' // Automatically adjust the height according to the content\n});\n\n// Adds a line chart to the sidebar panel\nsidebarPanel.add(lineChart);\n\nDraw a GIF image of post conflict land changes (November 2023.11-204.3) and place it in the side UI.\n\n//show gif\nfunction main() {\n  //Assume that the roi is defined and is a Feature or FeatureCollection\n  var roi = aoi;\n\n  // Let's say imgCol is defined and it contains 10 single-band images\n  var imgCol = classificationCollection.map(function(image){\n    return image.clip(roi);\n  });\n  \n  // Gets the number of images in the collection\n  var count =imgCol.toList(imgCol.size()).length();\n\n  // Calculate the number of images to skip\n  var skipCount = 5;\n\n  // Skip the previous images to get the last five images\n  var lastFiveImages = classificationCollection.toList(classificationCollection.size())\n  .slice(skipCount, count);\n\n  // Converts a list back to a collection of images\n  imgCol = ee.ImageCollection.fromImages(lastFiveImages).map(function(img){\n    return img.clip(aoi)\n  });\n\n  // Defines a function to map a single-band image to an RGB color\n  function mapToRgb(image) {\n    // Get a single band image\n    var band = image.select([0]);\n\n    // Creates a new image with the same R, G, and B values for each pixel\n    var r = band.where(band.eq(0), 0).where(band.eq(1), 255).where(band.eq(2), 200).toInt(); \n    var g = band.where(band.eq(0), 128).where(band.eq(1), 255).where(band.eq(2), 200).toInt(); \n    var b = band.where(band.eq(0), 0).where(band.eq(1), 0).where(band.eq(2), 200).toInt();\n\n    // Returns a new image containing the RGB band\n    return ee.Image.cat(r, g, b).rename(['red', 'green', 'blue']).toFloat();\n  }\n\n  // Map each image to an RGB color\n  var rgbImgCol = imgCol.map(mapToRgb);\n\n  // GIF parameters\n  var params = {\n    crs: 'EPSG:3857',\n    framesPerSecond: 2,\n    region: roi.geometry().transform('EPSG:3857', 1), // Use the converted region\n    min: 0,\n    max: 255,\n    bands: ['red', 'green', 'blue'],\n    dimensions: 512,\n  };\n\n  // Add the GIF to the panel\n  sidebarPanel.add(ui.Thumbnail(rgbImgCol, params));\n  \n}\n\nmain();\n\nCreate a tag and set the tag’s hyperlink to download the GIF.\n\n// Create a label\nvar label = ui.Label('Download the GIF of \"Changing Land Conditions in Conflict\".');\n\n// Set the URL of the tag to make it a hyperlink\nlabel.setUrl(rgbImgCol.getVideoThumbURL(params));\n\nsidebarPanel.add(label);\nThe image output should look like this:\n\n\n\nChanging Land conditions in Conflict, 2023.11-2024.3"
  }
]