[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Use this repository to host a website for your CASA0025 final project by following these stpes:\n\nclone this repository\ninstall quarto\nedit the ‘index.qmd’ file with the contents of your project\nusing terminal, navigate to the project directory and run “quarto render”\npush the changes to your github repository\non github, navigate to Settings&gt;Pages&gt;Build and Deployment. Make sure that under “Source” it says “deploy from branch”. Under “Branch”, select “Main” in the first dropdown and “Docs” under the second drop down. Then press “Save”\n\nYour website should now be available under https://imhonggae.github.io/CASA0025"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.\n\n\nWhat is the problem you’re trying to address using this application?\n\n\n\nWho are you building this application for? How does it address a need this community has?\n\n\n\nWhat data are you using?\n\n\n\nHow are you using this data to address the problem?\n\n\n\nHow does your application’s interface work to address the needs of your end user?\nThere are four main steps in the process of creating the User Interface (UI):\n1.Use the year selector to select the relevant year to display the appropriate layer. 2.Add the legends to the map. 3.The vegetation area before and after the conflict was calculated, and the change of vegetation area before and after the war was shown using line plots. 4.Draw all the month layers as GIFs. 5.Click the GIF download button to complete the GIF download.\n\n\n\n\nReplace the link below with the link to your application.\n\n\n\n\n\n\n\nUse this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):\nMap.setCenter(35.51898, 33.90153, 15);\n\nMap.setOptions(\"satellite\");\n\nvar aoi = ee.Geometry.Point(35.51898, 33.90153).buffer(3000);\n##Interface #1. Select the relevant year to display the appropriate layer Firstly, Create a map instance and Set the center point and zoom level of the map\nvar map1 = ui.Map();\n\nmap1.centerObject(aoi,10.5);\n\n\n\nPixelwise T-Test, 2018\n\n\nThen Create a selection box where the user can select 11, 12, 1, 2, 3 and add response logic when options change. After that call the function to update the displayed layer.\nvar imageCollection = classificationCollection.map(function(img){\n  return img.clip(aoi);\n});\n// Create a selection box where the user can select 11, 12, 1, 2, 3\nvar select = ui.Select({\n  items: ['2022-11', '2022-12', '2023-01', '2023-02', '2023-03','2023-11', '2023-12', '2024-01', '2024-02', '2024-03'],\n  value: '2022-11',  //Default selection '2022-11'\n  placeholder: 'Choose a number',\n  onChange: function(value) {\n    // Here you can add the response logic when the options change\n    updateMaps(value); // Call the function to update the map\n  }\n});\n\n// Create a label\nvar label = ui.Label('Please select a time', {margin: '10px 0px 5px 0px'});\n\n// Create a panel where you can place the selection boxes and labels\nvar controlPanel = ui.Panel({\n  widgets: [label, select],\n  style: {width: '300px', padding: '10px'} , // Positioning and styling\n  layout: ui.Panel.Layout.flow('horizontal')  // Set to horizontal layout\n});\n\n// Add the map to the root panel\nui.root.widgets().reset([map1]);\n\n\n// Set the style of the map\nmap1.style().set('width', '65%');\n\n// Create a panel to place the control panel\nvar sidebarPanel = ui.Panel({\n  widgets: [controlPanel],\n  style: {position: 'top-right', width: '120px',height: '300px',  margin: '0px 10px 0px 0px'}\n});\n\n// Adds the sidebar panel to the root panel\nui.root.add(sidebarPanel);\n\n\n\nPixelwise T-Test, 2018\n\n\nThis is the detail of update function. In this function, we first converts a collection of images to a list, then determine the index of the image by month\n// Converts a collection of images to a list\nvar imageList = imageCollection.toList(imageCollection.size());\n\nfunction updateMaps(month) {\n  // Determine the index of the image by month\n  var index1;\n  switch (month) {\n    case '2022-11':\n      index1 = 0;\n      break;\n    case '2022-12':\n      index1 = 1;\n      break;\n    case '2023-01':\n      index1 = 2;\n      break;\n    case '2023-02':\n      index1 = 3;\n      break;\n    case '2023-03':\n      index1 = 4;\n      break;\n    case '2023-11':\n      index1 = 5;\n      break;\n    case '2023-12':\n      index1 = 6;\n      break;\n    case '2024-01':\n      index1 = 7;\n      break;\n    case '2024-02':\n      index2 = 8;\n      break;\n    case '2024-03':\n      index1 = 9;\n      break;\n    default:\n      console.error('Invalid month selected:', month);\n      return;\n  }\n  // Get the image by index\n  var image1 = ee.Image(imageList.get(index1));\n#2. Add the legends to the map First define the color list and description list, then create the legend style and legend panel. Add legend items in a loop. It contains description labels and color blocks, adds legend items to the inside version of the diagram, and adds legends to the lower left corner of the map.\npdateMaps('2022-11');\n\n// Define the color list and description list\nvar palette = ['green', 'yellow', 'grey']; // Suppose this is your list of colors\nvar names = ['vegetation', 'bare', 'urban']; // A description corresponding to the color\n\n// Create a style for the legend\nvar legendStyle = {\n  margin: '0px 8px 15px 0px',\n  padding: '0px 5px 5px 0px',\n  position: 'bottom-left'\n};\n\n// Create the panel of legend\nvar legendPanel = ui.Panel({\n  widgets: [], // Used to add legend entries\n  style: legendStyle\n});\n\n// Add a legend entry\nfor (var i = 0; i &lt; palette.length; i++) {\n  var legendItem = ui.Panel({\n    layout: ui.Panel.Layout.Flow('horizontal'),\n    style: {margin: '0px 10px'}\n  });\n  \n  // create color block\n  var colorBlock = ui.Label({\n    style: {\n      backgroundColor: palette[i],\n      padding: '5px',\n      margin: '0 0 4px 0'\n    }\n  });\n  \n  // create desctription label\n  var description = ui.Label({\n    value: names[i],\n    style: {margin: '0 0 4px 8px'}\n  });\n  \n  legendItem.add(colorBlock);\n  legendItem.add(description);\n  \n  // Adds a legend item to the Legend panel\n  legendPanel.add(legendItem);\n}\n\n// Add the legend to the bottom left corner of the map\nmap1.add(legendPanel);\n\n\n\nPixelwise T-Test, 2018\n\n\n#3.The vegetation area before and after the conflict was calculated, and the change of vegetation area before and after the war was shown using line plots.\nFirst calculate the vegetation area of each layer\n\nvar aoi = ee.FeatureCollection('users/liujingyue01/Gaza');\nvar imageCollection=ee.ImageCollection('projects/ee-guo112591/assets/GAZA');\nprint(imageCollection)\n\n// 计算vegetation面积的函数\nfunction calculateVegetationArea(image) {\n  var vegetationArea = image.select('classification').eq(0).multiply(ee.Image.pixelArea()).reduceRegion({\n    reducer: ee.Reducer.sum(),\n    geometry: aoi,\n    scale: 30\n  }).get('classification');\n  return ee.Feature(null, {'date': image.get('date'), 'vegetationArea': vegetationArea});\n}\n\n// 应用函数到imageCollection中的每个Image\nvar vegetationAreas = imageCollection.map(calculateVegetationArea).sort('date');\n\n// 将结果转换为列表\nvar vegetationAreaList = vegetationAreas.toList(vegetationAreas.size());\n\nprint(vegetationAreaList)\n\nvar firstFive = ee.List.sequence(0, 9).map(function(i) { return ee.Feature(vegetationAreaList.get(i)).get('vegetationArea'); });\n\n// // 将面积转换为数值\nvar firstFiveNumbers = firstFive.map(function(area) { return ee.Number(area); });\nprint(firstFiveNumbers)\nIn order to reduce the time, we manually enter the calculated time above into the code and then generate the line chart. Set two y values in the line chart, respectively before conflict and after conflict\nvar firstFiveNumbers = ee.List([ 108.981451,\n  124.064503,\n  156.647346,\n  160.888861,\n  191.688693]);\nvar lastFiveNumbers = ee.List([145.504210,\n  160.795185,\n  125.786433,\n  105.063353, \n  107.703722]);\n\n// 横坐标数据\nvar xAxis = ['11', '12', '1', '2', '3'];\n\n// 创建一个符合Google Visualization API的DataTable格式的数据源\nvar chartData = ee.FeatureCollection(xAxis.map(function(x, index) {\n  return ee.Feature(null, {\n    'x': x,\n    'y1': firstFiveNumbers.get(index),\n    'y2': lastFiveNumbers.get(index)\n  });\n}));\n\n// 使用ui.Chart创建折线图\nvar lineChart = ui.Chart.feature.byFeature({\n  features: chartData,\n  xProperty: 'x',\n  yProperties: ['y1', 'y2'] // 添加两组y值\n}).setSeriesNames(['Before the conflict', 'After the conflict']) // 设置系列名称\n  .setOptions({\n    title: 'Comparison of areas before and after the conflict',\n    hAxis: {title: 'month', titleTextStyle: {color: 'red'}},\n    vAxis: {title: 'vegetation Area', titleTextStyle: {color: 'blue'}},\n    legend: 'right' // 显示图例\n  });\n\n// 设置图表的尺寸\nvar options = {\n  title: 'Comparison of areas before and after the conflict',\n  hAxis: {title: 'month', titleTextStyle: {color: 'red'}},\n  vAxis: {title: 'vegetation Area (km^2)', titleTextStyle: {color: 'blue'}},\n  legend: 'right',\n  width: 400, // 设置图表宽度\n  height: 300 // 设置图表高度\n};\n\n// 创建折线图\nvar lineChart = ui.Chart.feature.byFeature({\n  features: chartData,\n  xProperty: 'x',\n  yProperties: ['y1', 'y2']\n}).setSeriesNames(['Before the cnflict', 'After the conflict']).setOptions(options);\n\n// 调整侧边栏面板的样式，以确保有足够的空间显示图表\nsidebarPanel.style().set({\n  width: '400px', // 设置面板的最小宽度\n  height: 'auto' // 根据内容自动调整高度  \n});\n\n// 将折线图添加到侧边栏面板\nsidebarPanel.add(lineChart);\n#4.Draw all the month layers as GIFs and Click the GIF download button to complete the GIF download.\n//显示动图\nfunction main() {\n  // 假设roi已经定义，并且是一个Feature或FeatureCollection\n  var roi = aoi;\n\n  // 假设imgCol已经定义，并且它包含了10个单波段影像\n  var imgCol = classificationCollection.map(function(image){\n    return image.clip(roi);\n  });\n  \n  // 获取集合中的图像数量\nvar count =imgCol.toList(imgCol.size()).length();\n\n// 计算要跳过的图像数量\nvar skipCount = 5;\n\n// 跳过前面的图像，获取最后五个图像\nvar lastFiveImages = classificationCollection.toList(classificationCollection.size())\n  .slice(skipCount, count);\n\n// 将列表转换回图像集合\nimgCol = ee.ImageCollection.fromImages(lastFiveImages).map(function(img){\n  return img.clip(aoi)\n});\n\n  \n  \n  \n\n  // 定义一个函数来将单波段影像映射到RGB颜色\n  function mapToRgb(image) {\n    // 获取单波段影像\n    var band = image.select([0]);\n\n    // 创建一个新的影像，其中每个像素的R、G、B值都相同\n    var r = band.where(band.eq(0), 0).where(band.eq(1), 255).where(band.eq(2), 200).toInt(); \n  var g = band.where(band.eq(0), 128).where(band.eq(1), 255).where(band.eq(2), 200).toInt(); \n  var b = band.where(band.eq(0), 0).where(band.eq(1), 0).where(band.eq(2), 200).toInt();\n\n    // // 返回一个新的影像，其中包含RGB波段\n    return ee.Image.cat(r, g, b).rename(['red', 'green', 'blue']).toFloat();\n}\n\n  // 将每个影像映射到RGB颜色\n  var rgbImgCol = imgCol.map(mapToRgb);\n\n  // 动图参数\n  var params = {\n    crs: 'EPSG:3857',\n    framesPerSecond: 2,\n    region: roi.geometry().transform('EPSG:3857', 1), // 使用转换后的region\n    min: 0,\n    max: 255,\n    bands: ['red', 'green', 'blue'],\n    dimensions: 512,\n  };\n  // 将动图添加到面板\n  sidebarPanel.add(ui.Thumbnail(rgbImgCol, params));\n  \n  // 创建一个标签\n  var label = ui.Label('Download the GIF of \"Changing Land Conditions in Conflict\".');\n\n  // 设置标签的 URL，使其成为一个超链接\n  label.setUrl(rgbImgCol.getVideoThumbURL(params));\n\n  sidebarPanel.add(label);\n}\n\nmain();\nCreate a tag and set the tag’s hyperlink to download the GIF.\n// Create a label\n  var label = ui.Label('Download the GIF of \"Changing Land Conditions in Conflict\".');\n\n// Set the URL of the tag to make it a hyperlink\n  label.setUrl(rgbImgCol.getVideoThumbURL(params));\nYou can include images:\n\n\n\nPixelwise T-Test, 2018\n\n\nand math: \\[ \\Large t = {\\frac{\\overline{x_1}-\\overline{x_2}} {\\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}}}} \\]"
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.\n\n\nWhat is the problem you’re trying to address using this application?\n\n\n\nWho are you building this application for? How does it address a need this community has?\n\n\n\nWhat data are you using?\n\n\n\nHow are you using this data to address the problem?\n\n\n\nHow does your application’s interface work to address the needs of your end user?\nThere are four main steps in the process of creating the User Interface (UI):\n1.Use the year selector to select the relevant year to display the appropriate layer. 2.Add the legends to the map. 3.The vegetation area before and after the conflict was calculated, and the change of vegetation area before and after the war was shown using line plots. 4.Draw all the month layers as GIFs. 5.Click the GIF download button to complete the GIF download."
  },
  {
    "objectID": "index.html#the-application",
    "href": "index.html#the-application",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "Replace the link below with the link to your application."
  },
  {
    "objectID": "index.html#how-it-works",
    "href": "index.html#how-it-works",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "Use this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):\nMap.setCenter(35.51898, 33.90153, 15);\n\nMap.setOptions(\"satellite\");\n\nvar aoi = ee.Geometry.Point(35.51898, 33.90153).buffer(3000);\n##Interface #1. Select the relevant year to display the appropriate layer Firstly, Create a map instance and Set the center point and zoom level of the map\nvar map1 = ui.Map();\n\nmap1.centerObject(aoi,10.5);\n\n\n\nPixelwise T-Test, 2018\n\n\nThen Create a selection box where the user can select 11, 12, 1, 2, 3 and add response logic when options change. After that call the function to update the displayed layer.\nvar imageCollection = classificationCollection.map(function(img){\n  return img.clip(aoi);\n});\n// Create a selection box where the user can select 11, 12, 1, 2, 3\nvar select = ui.Select({\n  items: ['2022-11', '2022-12', '2023-01', '2023-02', '2023-03','2023-11', '2023-12', '2024-01', '2024-02', '2024-03'],\n  value: '2022-11',  //Default selection '2022-11'\n  placeholder: 'Choose a number',\n  onChange: function(value) {\n    // Here you can add the response logic when the options change\n    updateMaps(value); // Call the function to update the map\n  }\n});\n\n// Create a label\nvar label = ui.Label('Please select a time', {margin: '10px 0px 5px 0px'});\n\n// Create a panel where you can place the selection boxes and labels\nvar controlPanel = ui.Panel({\n  widgets: [label, select],\n  style: {width: '300px', padding: '10px'} , // Positioning and styling\n  layout: ui.Panel.Layout.flow('horizontal')  // Set to horizontal layout\n});\n\n// Add the map to the root panel\nui.root.widgets().reset([map1]);\n\n\n// Set the style of the map\nmap1.style().set('width', '65%');\n\n// Create a panel to place the control panel\nvar sidebarPanel = ui.Panel({\n  widgets: [controlPanel],\n  style: {position: 'top-right', width: '120px',height: '300px',  margin: '0px 10px 0px 0px'}\n});\n\n// Adds the sidebar panel to the root panel\nui.root.add(sidebarPanel);\n\n\n\nPixelwise T-Test, 2018\n\n\nThis is the detail of update function. In this function, we first converts a collection of images to a list, then determine the index of the image by month\n// Converts a collection of images to a list\nvar imageList = imageCollection.toList(imageCollection.size());\n\nfunction updateMaps(month) {\n  // Determine the index of the image by month\n  var index1;\n  switch (month) {\n    case '2022-11':\n      index1 = 0;\n      break;\n    case '2022-12':\n      index1 = 1;\n      break;\n    case '2023-01':\n      index1 = 2;\n      break;\n    case '2023-02':\n      index1 = 3;\n      break;\n    case '2023-03':\n      index1 = 4;\n      break;\n    case '2023-11':\n      index1 = 5;\n      break;\n    case '2023-12':\n      index1 = 6;\n      break;\n    case '2024-01':\n      index1 = 7;\n      break;\n    case '2024-02':\n      index2 = 8;\n      break;\n    case '2024-03':\n      index1 = 9;\n      break;\n    default:\n      console.error('Invalid month selected:', month);\n      return;\n  }\n  // Get the image by index\n  var image1 = ee.Image(imageList.get(index1));\n#2. Add the legends to the map First define the color list and description list, then create the legend style and legend panel. Add legend items in a loop. It contains description labels and color blocks, adds legend items to the inside version of the diagram, and adds legends to the lower left corner of the map.\npdateMaps('2022-11');\n\n// Define the color list and description list\nvar palette = ['green', 'yellow', 'grey']; // Suppose this is your list of colors\nvar names = ['vegetation', 'bare', 'urban']; // A description corresponding to the color\n\n// Create a style for the legend\nvar legendStyle = {\n  margin: '0px 8px 15px 0px',\n  padding: '0px 5px 5px 0px',\n  position: 'bottom-left'\n};\n\n// Create the panel of legend\nvar legendPanel = ui.Panel({\n  widgets: [], // Used to add legend entries\n  style: legendStyle\n});\n\n// Add a legend entry\nfor (var i = 0; i &lt; palette.length; i++) {\n  var legendItem = ui.Panel({\n    layout: ui.Panel.Layout.Flow('horizontal'),\n    style: {margin: '0px 10px'}\n  });\n  \n  // create color block\n  var colorBlock = ui.Label({\n    style: {\n      backgroundColor: palette[i],\n      padding: '5px',\n      margin: '0 0 4px 0'\n    }\n  });\n  \n  // create desctription label\n  var description = ui.Label({\n    value: names[i],\n    style: {margin: '0 0 4px 8px'}\n  });\n  \n  legendItem.add(colorBlock);\n  legendItem.add(description);\n  \n  // Adds a legend item to the Legend panel\n  legendPanel.add(legendItem);\n}\n\n// Add the legend to the bottom left corner of the map\nmap1.add(legendPanel);\n\n\n\nPixelwise T-Test, 2018\n\n\n#3.The vegetation area before and after the conflict was calculated, and the change of vegetation area before and after the war was shown using line plots.\nFirst calculate the vegetation area of each layer\n\nvar aoi = ee.FeatureCollection('users/liujingyue01/Gaza');\nvar imageCollection=ee.ImageCollection('projects/ee-guo112591/assets/GAZA');\nprint(imageCollection)\n\n// 计算vegetation面积的函数\nfunction calculateVegetationArea(image) {\n  var vegetationArea = image.select('classification').eq(0).multiply(ee.Image.pixelArea()).reduceRegion({\n    reducer: ee.Reducer.sum(),\n    geometry: aoi,\n    scale: 30\n  }).get('classification');\n  return ee.Feature(null, {'date': image.get('date'), 'vegetationArea': vegetationArea});\n}\n\n// 应用函数到imageCollection中的每个Image\nvar vegetationAreas = imageCollection.map(calculateVegetationArea).sort('date');\n\n// 将结果转换为列表\nvar vegetationAreaList = vegetationAreas.toList(vegetationAreas.size());\n\nprint(vegetationAreaList)\n\nvar firstFive = ee.List.sequence(0, 9).map(function(i) { return ee.Feature(vegetationAreaList.get(i)).get('vegetationArea'); });\n\n// // 将面积转换为数值\nvar firstFiveNumbers = firstFive.map(function(area) { return ee.Number(area); });\nprint(firstFiveNumbers)\nIn order to reduce the time, we manually enter the calculated time above into the code and then generate the line chart. Set two y values in the line chart, respectively before conflict and after conflict\nvar firstFiveNumbers = ee.List([ 108.981451,\n  124.064503,\n  156.647346,\n  160.888861,\n  191.688693]);\nvar lastFiveNumbers = ee.List([145.504210,\n  160.795185,\n  125.786433,\n  105.063353, \n  107.703722]);\n\n// 横坐标数据\nvar xAxis = ['11', '12', '1', '2', '3'];\n\n// 创建一个符合Google Visualization API的DataTable格式的数据源\nvar chartData = ee.FeatureCollection(xAxis.map(function(x, index) {\n  return ee.Feature(null, {\n    'x': x,\n    'y1': firstFiveNumbers.get(index),\n    'y2': lastFiveNumbers.get(index)\n  });\n}));\n\n// 使用ui.Chart创建折线图\nvar lineChart = ui.Chart.feature.byFeature({\n  features: chartData,\n  xProperty: 'x',\n  yProperties: ['y1', 'y2'] // 添加两组y值\n}).setSeriesNames(['Before the conflict', 'After the conflict']) // 设置系列名称\n  .setOptions({\n    title: 'Comparison of areas before and after the conflict',\n    hAxis: {title: 'month', titleTextStyle: {color: 'red'}},\n    vAxis: {title: 'vegetation Area', titleTextStyle: {color: 'blue'}},\n    legend: 'right' // 显示图例\n  });\n\n// 设置图表的尺寸\nvar options = {\n  title: 'Comparison of areas before and after the conflict',\n  hAxis: {title: 'month', titleTextStyle: {color: 'red'}},\n  vAxis: {title: 'vegetation Area (km^2)', titleTextStyle: {color: 'blue'}},\n  legend: 'right',\n  width: 400, // 设置图表宽度\n  height: 300 // 设置图表高度\n};\n\n// 创建折线图\nvar lineChart = ui.Chart.feature.byFeature({\n  features: chartData,\n  xProperty: 'x',\n  yProperties: ['y1', 'y2']\n}).setSeriesNames(['Before the cnflict', 'After the conflict']).setOptions(options);\n\n// 调整侧边栏面板的样式，以确保有足够的空间显示图表\nsidebarPanel.style().set({\n  width: '400px', // 设置面板的最小宽度\n  height: 'auto' // 根据内容自动调整高度  \n});\n\n// 将折线图添加到侧边栏面板\nsidebarPanel.add(lineChart);\n#4.Draw all the month layers as GIFs and Click the GIF download button to complete the GIF download.\n//显示动图\nfunction main() {\n  // 假设roi已经定义，并且是一个Feature或FeatureCollection\n  var roi = aoi;\n\n  // 假设imgCol已经定义，并且它包含了10个单波段影像\n  var imgCol = classificationCollection.map(function(image){\n    return image.clip(roi);\n  });\n  \n  // 获取集合中的图像数量\nvar count =imgCol.toList(imgCol.size()).length();\n\n// 计算要跳过的图像数量\nvar skipCount = 5;\n\n// 跳过前面的图像，获取最后五个图像\nvar lastFiveImages = classificationCollection.toList(classificationCollection.size())\n  .slice(skipCount, count);\n\n// 将列表转换回图像集合\nimgCol = ee.ImageCollection.fromImages(lastFiveImages).map(function(img){\n  return img.clip(aoi)\n});\n\n  \n  \n  \n\n  // 定义一个函数来将单波段影像映射到RGB颜色\n  function mapToRgb(image) {\n    // 获取单波段影像\n    var band = image.select([0]);\n\n    // 创建一个新的影像，其中每个像素的R、G、B值都相同\n    var r = band.where(band.eq(0), 0).where(band.eq(1), 255).where(band.eq(2), 200).toInt(); \n  var g = band.where(band.eq(0), 128).where(band.eq(1), 255).where(band.eq(2), 200).toInt(); \n  var b = band.where(band.eq(0), 0).where(band.eq(1), 0).where(band.eq(2), 200).toInt();\n\n    // // 返回一个新的影像，其中包含RGB波段\n    return ee.Image.cat(r, g, b).rename(['red', 'green', 'blue']).toFloat();\n}\n\n  // 将每个影像映射到RGB颜色\n  var rgbImgCol = imgCol.map(mapToRgb);\n\n  // 动图参数\n  var params = {\n    crs: 'EPSG:3857',\n    framesPerSecond: 2,\n    region: roi.geometry().transform('EPSG:3857', 1), // 使用转换后的region\n    min: 0,\n    max: 255,\n    bands: ['red', 'green', 'blue'],\n    dimensions: 512,\n  };\n  // 将动图添加到面板\n  sidebarPanel.add(ui.Thumbnail(rgbImgCol, params));\n  \n  // 创建一个标签\n  var label = ui.Label('Download the GIF of \"Changing Land Conditions in Conflict\".');\n\n  // 设置标签的 URL，使其成为一个超链接\n  label.setUrl(rgbImgCol.getVideoThumbURL(params));\n\n  sidebarPanel.add(label);\n}\n\nmain();\nCreate a tag and set the tag’s hyperlink to download the GIF.\n// Create a label\n  var label = ui.Label('Download the GIF of \"Changing Land Conditions in Conflict\".');\n\n// Set the URL of the tag to make it a hyperlink\n  label.setUrl(rgbImgCol.getVideoThumbURL(params));\nYou can include images:\n\n\n\nPixelwise T-Test, 2018\n\n\nand math: \\[ \\Large t = {\\frac{\\overline{x_1}-\\overline{x_2}} {\\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}}}} \\]"
  }
]