# CASA00025 Group Project Title Here

## Project Summary 

Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.

### Problem Statement 

What is the problem youâ€™re trying to address using this application? 

### End User 

Who are you building this application for? How does it address a need this community has?

### Data

What data are you using? 

### Methodology

How are you using this data to address the problem?

### Interface

How does your application's interface work to address the needs of your end user?

There are four main steps in the process of creating the User Interface (UI):

  1.Use the year selector to select the relevant year to display the appropriate layer.
  2.The vegetation area before and after the conflict was calculated, and the change of vegetation area before and after the war was shown using line plots.
  3.Draw all the month layers as GIFs.
  4.Click the GIF download button to complete the GIF download.
  5.Add the legends to the map

## The Application 

Replace the link below with the link to your application.

:::{.column-page}

<iframe src='https://bigdata0025.projects.earthengine.app/view/conflict' width='100%' height='700px'></iframe>

:::
## How it Works 

Use this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):

```js
Map.setCenter(35.51898, 33.90153, 15);

Map.setOptions("satellite");

var aoi = ee.Geometry.Point(35.51898, 33.90153).buffer(3000);
```


##Interface
# 1. Select the relevant year to display the appropriate layer
Firstly,  Create a map instance and Set the center point and zoom level of the map

```js
var map1 = ui.Map();

map1.centerObject(aoi,10.5);
```
![Pixelwise T-Test, 2018](images/beirut_change_2020.jpg)

Then Create a selection box where the user can select 11, 12, 1, 2, 3 and add response logic when options change. After that call the function to update the displayed layer.
```js
var imageCollection = classificationCollection.map(function(img){
  return img.clip(aoi);
});
// Create a selection box where the user can select 11, 12, 1, 2, 3
var select = ui.Select({
  items: ['2022-11', '2022-12', '2023-01', '2023-02', '2023-03','2023-11', '2023-12', '2024-01', '2024-02', '2024-03'],
  value: '2022-11',  //Default selection '2022-11'
  placeholder: 'Choose a number',
  onChange: function(value) {
    // Here you can add the response logic when the options change
    updateMaps(value); // Call the function to update the map
  }
});

// Create a label
var label = ui.Label('Please select a time', {margin: '10px 0px 5px 0px'});

// Create a panel where you can place the selection boxes and labels
var controlPanel = ui.Panel({
  widgets: [label, select],
  style: {width: '300px', padding: '10px'} , // Positioning and styling
  layout: ui.Panel.Layout.flow('horizontal')  // Set to horizontal layout
});

// Add the map to the root panel
ui.root.widgets().reset([map1]);


// Set the style of the map
map1.style().set('width', '65%');
```
![Pixelwise T-Test, 2018](images/beirut_change_2020.jpg)





You can include images:

![Pixelwise T-Test, 2018](images/beirut_change_2020.jpg)

and math:
$$ \Large t = {\frac{\overline{x_1}-\overline{x_2}} {\sqrt{\frac{s^2_1}{n_1} + \frac{s^2_2}{n_2}}}} $$


